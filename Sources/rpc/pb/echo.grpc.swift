//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: echo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `EchoServerClient`, then call methods of this protocol to make API calls.
internal protocol EchoServerClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: EchoServerClientInterceptorFactoryProtocol? { get }

  func echo(
    _ request: EchoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<EchoRequest, EchoResponse>
}

extension EchoServerClientProtocol {
  internal var serviceName: String {
    return "EchoServer"
  }

  /// Unary call to Echo
  ///
  /// - Parameters:
  ///   - request: Request to send to Echo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func echo(
    _ request: EchoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EchoRequest, EchoResponse> {
    return self.makeUnaryCall(
      path: "/EchoServer/Echo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }
}

internal protocol EchoServerClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'echo'.
  func makeEchoInterceptors() -> [ClientInterceptor<EchoRequest, EchoResponse>]
}

internal final class EchoServerClient: EchoServerClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: EchoServerClientInterceptorFactoryProtocol?

  /// Creates a client for the EchoServer service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EchoServerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol EchoServerProvider: CallHandlerProvider {
  var interceptors: EchoServerServerInterceptorFactoryProtocol? { get }

  func echo(request: EchoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EchoResponse>
}

extension EchoServerProvider {
  internal var serviceName: Substring { return "EchoServer" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(
    _ methodName: Substring,
    callHandlerContext: CallHandlerContext
  ) -> GRPCCallHandler? {
    switch methodName {
    case "Echo":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeEchoInterceptors() ?? []
      ) { context in
        return { request in
          self.echo(request: request, context: context)
        }
      }

    default:
      return nil
    }
  }
}

internal protocol EchoServerServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'echo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEchoInterceptors() -> [ServerInterceptor<EchoRequest, EchoResponse>]
}
